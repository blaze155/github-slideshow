AI训练营 Python第一天 20200905

1.注释
#后面接文字，进行单行注释，运行代码时不对代码造成影响，仅为文字说明。若要进行下一行注释或者分段，则必须在下一行开头添加#
'''（三个单引号或者三个双引号）可用于多行注释，如果没有成对出现，则之后所有文字都为注释，反之为注释结束。

2. 运算符
算术运算符 + - * / 为加减乘除，//为取商，%为取余， **为幂运算
比较运算符 < > = != <= >=
Booleans: True 和 False (必须是大写，且为Python关键字)
逻辑运算符：and与 or或 not非
位运算符  ~  &  ` ^  <<  >>
其它运算符    in    not in     is     not is

is, is not 对比的是两个变量的内存地址
==  !=  对比的是两个变量的值
比较的两个变量指向的是地址不可变的类型（字符串str等），则is, is not 和 == != 等价
若指向的是地址可变的类型（列表list，字典dict，元组tuple等），则不同

补充： = 为赋值， ==为判断两者是否相等

运算符优先级 与现实中数学运算相同

3.变量与赋值
使用变量前需先赋值        变量不能以数字开头            变量名区分大小写。

4.数据类型与转换
整形数字 int 浮点型数字float  字符串str  
布尔值bool: True, False 数字运算中分别为1或0
容器类型： 字符串、元组、列表、字典和集合

万物皆可为对象object，且拥有对应的属性（attributes）和方法(methods）.
其中type(object)可查看类型信息，判断两个类型是否相同推荐使用isinstance().
python中可引入import不同的包（package），一般出现在代码最开始的位置。

类型转化可以使用int(), float(), str().
----------------------------------------------------------------------------------
AI训练营 Python第二天  20200906

5.print函数
print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)
将对象以字符串方式格式化输出到流文件对象file里。非关键字参数都按str()转化成字符串方式输出
sep实现分隔符
end是输出结束时的字符，默认换行符‘\n’
file是定义流输出的文件，可以是标准的系统输出sys.stdout,也可以重定义为别的文件
flush是立即把内容输出到流文件，不做缓存
——————————————————————————
位运算
1. 原码 反码 及 补码
原码  二进制表示（有1符号位）
反码  正数反码是其本身，附属反码符号位不变，其余取反（对应正数按位取反）
补码  正数补码就是原码，负数补码是反码+1。

2. 按位运算
按位与Bitwise AND (&)  同1为1
按位或Bitwise OR (|) 有1为1
按位异或Bitwise XOR (Exclusive OR) (^) 不同为1
按位非Bitwise Complement (~)  对于任意整数N,~N=-(~(~N)+1)=-(N+1)   满足交换律和结合律
按位左移<<  将二进制表示向左移动对应位数
按位右移>>  将二进制表示向右移动对应位数

3. 利用位运算实现快速计算
通过<<，>>快速计算2的倍数问题。
n<<1  计算n*2
n>>1  计算n/2  (负奇数运算不可用）
n<<m  计算n*(2^m),即乘以2的m次方
n>>m  计算n/(2^m),即除以2的m次方
1<<n  计算2^n
通过^快速交换两个整数。
a ^= b  
b ^= a
a ^= b
通过a&(-a)快速获取a的最后为1位置的整数     #按位与  同1为1

4. 利用位运算实现整数集合
一个数的二进制表示可以看做是一个集合（0表示不在其中，1表示在集合中）

元素与集合的操作：
a | (1<<i)    把i插入到集合中
a & ~(1<<i)    把i从集合中删除
a & (1<<i)     判断i是否属于该集合（零不属于，非零属于）

集合之间的操作
~a    补集
a & b 交集
a | b 并集
a & (~b)  a差b

整数在内存中以补码形式存在，输出按补码输出
Python中 bin 一个负数（十进制表示），输出的是它的原码的二进制表示加上个负号。     特别注意！！！
Python中的整型是补码形式存储的
Python中的整型是不限制长度的，不会超范围溢出。
为了获得负数（十进制表示）的补码，需要手动将其和十六进制数进行按位与操作，再交给bin()进行输出，得到的才是负数的补码表示      特别注意！！！
——————————————————————————————————————————————————————————————————————————————————————————————————————————————————

条件语句
1. if 语句
if expression:  #注意不得漏掉冒号！！！        注意使用缩进！！！
	expr_true_suite
代码只有当条件为真时才执行，否则将继续执行紧跟之后的语句。
单个if语句的条件表达式可以通过and, or 和not 实现多重判断 （使用括号）

2. if-else语句
if expression:
	expr_true_suite
else:
	expr_false_suite
条件为真时，执行if下的语句，条件为假时，执行else下的语句
if语句可以进行嵌套
同一条件下的if-else语句必须具备相同的缩进以确保执行。   特别注意！！！！

3. if-elif-else语句
if expression1:
	expr1_true_suite
elif expression2:
	expr2_true_suite
	...
elif expressionN:
	exprN_true_suite
else:
	expr_false_suite
	
elif语句为else if,用来检查多个表达式是否为真，并在为真时执行特定代码块中的代码。

4. assert关键词
当assert后的条件为False时，程序自动崩溃并抛出AssertionError的异常

————————————————————————————————————————————————————————————————————————————————————————————————————————

循环语句

1.while循环
while语句最基本的形式包括一个位于顶部的布尔表达式，一个或多个属于while代码的缩进语句
while循环的代码会一直循环执行，指导布尔表达式的值为假。
布尔表达式可以不带< > == !=  in, not in 等运算符，仅给出数值之类的条件。当while后写入一个非零整数时，视为真值，执行循环体；写入0时，视为假，不执行循环体。
也可以写入str, list或任何序列，长度非零则视为真，执行循环体，否则视为假，不执行循环体。

2. while-else循环
while循环正常执行完的情况下，执行else输出，如果while循环中出现了跳出循环的语句，比如break,将不执行else代码块的内容。

3. for循环
for循环是迭代循环，在Python中相当于一个通用的序列迭代器，可以遍历任何有序序列，如str, list, tuple等，也可以遍历任何可迭代对象，如dict等
每次循环，迭代变量被设置为可迭代对象的当前元素，提供给代码块使用。

4. for-else循环
参照while-else循环

5. range函数
range([start], stop, [step=])
该内置函数有三个参数，其中括号里的两个参数可填可不填
step=1表示默认值是1，依次按1累加，如为负数，则按照数值递减。
此函数生成一个从start参数的值到stop参数的值结束的的数字序列，该序列包含start的值，但不包含stop的值。为左闭右开区间。

6.enumerate函数
enumerate(sequence,[start=0])
sequence: 一个序列、迭代器或其他支持迭代对象
start:下标起始位置，可设置指定数值开始
返回enumerate(枚举)对象

7.break语句
跳出当前所在层的循环

8.continue语句
终止本轮循环并开始下一轮循环

9.pass语句
不做任何事，如果你在需要有语句的地方不写任何语句，那么解释器会提示出错，而pass语句则是用来解决这些问题的。

10. 推导式
列表推导式   [expr for value in collection [if collection]]
元组推导式   (expr for value in collection [if collection])
字典推导式   {key_expr: value_expr ofr value in collection [if condition]}
集合推导式   {expr for value in collection [if condition]}
其它推导式   next(iterator[,default]) return the next item from the iterator. If default is given and the iterator is exhausted, it is returned instead of raising stop iteration.
________________________________________________________________________________________________

异常处理
异常就是运行期检测到的错误。计算机语言针对可能出现的错误定义了异常类型。某种错误引发对应的异常时，异常处理程序将被启动，从而恢复程序的正常运行。

1. 标准异常类型
Python 标准异常总结
BaseException：所有异常的 基类
Exception：常规异常的 基类
StandardError：所有的内建标准异常的基类
ArithmeticError：所有数值计算异常的基类
FloatingPointError：浮点计算异常
OverflowError：数值运算超出最大限制
ZeroDivisionError：除数为零
AssertionError：断言语句（assert）失败
AttributeError：尝试访问未知的对象属性
EOFError：没有内建输入，到达EOF标记
EnvironmentError：操作系统异常的基类
IOError：输入/输出操作失败
OSError：操作系统产生的异常（例如打开一个不存在的文件）
WindowsError：系统调用失败
ImportError：导入模块失败的时候
KeyboardInterrupt：用户中断执行
LookupError：无效数据查询的基类
IndexError：索引超出序列的范围
KeyError：字典中查找一个不存在的关键字
MemoryError：内存溢出（可通过删除对象释放内存）
NameError：尝试访问一个不存在的变量
UnboundLocalError：访问未初始化的本地变量
ReferenceError：弱引用试图访问已经垃圾回收了的对象
RuntimeError：一般的运行时异常
NotImplementedError：尚未实现的方法
SyntaxError：语法错误导致的异常
IndentationError：缩进错误导致的异常
TabError：Tab和空格混用
SystemError：一般的解释器系统异常
TypeError：不同类型间的无效操作
ValueError：传入无效的参数
UnicodeError：Unicode相关的异常
UnicodeDecodeError：Unicode解码时的异常
UnicodeEncodeError：Unicode编码错误导致的异常
UnicodeTranslateError：Unicode转换错误导致的异常

2.Python标准警告总结
Warning：警告的基类
DeprecationWarning：关于被弃用的特征的警告
FutureWarning：关于构造将来语义会有改变的警告
UserWarning：用户代码生成的警告
PendingDeprecationWarning：关于特性将会被废弃的警告
RuntimeWarning：可疑的运行时行为(runtime behavior)的警告
SyntaxWarning：可疑语法的警告
ImportWarning：用于在导入模块过程中触发的警告
UnicodeWarning：与Unicode相关的警告
BytesWarning：与字节或字节码相关的警告
ResourceWarning：与资源使用相关的警告

3. try-except语句
try:
	
except Exception [as reason]:

try语句按照以下方式工作：
首先执行try子句
如果没有异常，则忽略except子句，仅执行try子句
如果出现异常，则忽略try子句，如果异常类型与之后的名称相符，则队形的except子句将被执行。最后执行try-except语句之后的代码。
如果一个异常没有与任何的except匹配，那么这个异常讲话传递给上层的try中。

一个try语句可能包含多个except子句，分别来处理不同的特定异常。最多只有一个分支会被执行。

异常类型应该规范排序，从最具针对性的异常到最通用的异常。

一个except语句可以同时处理多个异常，这些异常将被放在同一个括号里成为一个元组。

4. try-except-finally语句
try:检测范围
except Exceptions [as reason]: 出现异常后的处理代码
finally:无论如何都会被执行的代码
不管try子句里面有没有发生异常， finally子句都会执行。
如果一个异常在try子句里被抛出，而又没有任何的except把它截住，那么这个异常会在finally子句执行后被抛出。

5. try-except-else语句
try:检测范围
except Exceptions [as reason]: 出现异常后的处理代码
else:没有异常情况下会被执行的代码
这不是一个很好的方式！！！

6.Raise语句
抛出一个指定的异常。










	


