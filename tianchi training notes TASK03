AI训练营python TASK2 第五天 20200909

函数

函数的定义
Python把函数当成对象，可以从另一个函数中返回出来而去构建高阶函数，比如：参数是函数，返回值是函数。

函数以def关键词开头，后接函数名和圆括号
函数执行代码以冒号开始，并且缩进
return表达式结束函数，选择性地返回一个值给调用方，不带表达式的return相当于返回None.

def functionnae(parameters):
	"函数_文档字符串"
	 function _suite
	 return [expression]

函数的调用
输入函数名以及参数

函数文档
docstring 常用成对三引号

函数参数

1.位置参数（positional argument）

def functionname(arg1):
       "函数_文档字符串"
       function_suite
       return [expression]
arg1-位置参数，这些参数在调用函数（call function）时位置要固定。


2.默认参数（default argument）

def functionname(arg1, arg2=v):
       "函数_文档字符串"
       function_suite
       return [expression]
arg2=v，默认参数=默认值，调用函数时，默认参数的值如果没有传入，则被认为是默认值。
默认参数一定要放在位置参数后面，不然程序会报错。
python允许函数调用时参数的顺序与声明时不一致，因为python解释器能够用参数名匹配参数值。


3.可变参数 （variable argument）

可变参数就是传入的参数个数是可变的，可以是0,1,2到任意个，是不定长的参数。
def functionname(arg1, arg2=v, *args):
       "函数_文档字符串"
       function_suite
       return [expression]

*args - 可变参数，可以是零个到任意个，自动组装成元组。
加了星号*的变量名会存放所有未命名的变量参数。


4.关键字参数（keyword argument）

def functionname(arg1, arg2=v, args, **kwarg):
       "函数_文档字符串"
       function_suite
       return [expression]
	   
**kwarg-关键字参数，可以是零个到任意个，自动组装成字典。

可变参数与关键字参数都允许传入零个到任意个参数
可变参数在函数调用时自动组装为一个元组（tuple）
关键字参数在函数内部自动组装为一个字典（dict）

5.命名关键字参数（name keyword argument）

def functionname(arg1, arg2=v, args, *, nkw, *kw):
       "函数_文档字符串"
       function_suite
       return [expression]

*,nkw- 命名关键字参数，用户想要输入的关键字参数，定义方式是在nkw前面加个*。   注意传入参数时，必须写成nkw=
如果要限制关键字参数的名字，就可以用命名关键字参数
使用命名关键字参数时，要注意不能缺少参数名


6.参数组合
在python中定义函数，可以用位置参数、默认参数、可变参数、命名关键字参数和关键字参数，这5种参数中的4个都可以一起使用。
但是注意参数定义的顺序必须是：

位置参数、默认参数、可变参数和关键字参数
位置参数、默认参数、命名关键字参数和关键字参数

注意定义可变参数和关键字参数的语法：
*args是可变参数，args接收的是一个tuple
**kwargs是关键字参数，kwargs接收的是一个dict

命名关键字参数是为了限制调用者可以传入的参数名，同时可以提供默认值。定义明明关键字参数不要忘了写*，否则定义的是位置参数。

警告： 虽然可以组合多达5种参数，但是不要同时使用太多的组合，否则函数很难懂。

------------------------------

函数返回值
return

------------------------------

变量作用域
python中，程序的变量并不是在哪个位置都可以访问的，访问权限决定于这个变量是在哪里赋值的
定义在函数内部的变量拥有局部作用域，称为局部变量
定义在函数外部的变量用于全局作用域，称为全局变量
局部变量只能在被声明的函数内部访问，而全局变量可以在整个程序范围内访问

当内部作用域想修改外部作用域的变量时，就要用到global和nonlocal关键字

-----------------

内部嵌套函数


------------------

闭包

函数式编程的一个重要语法结构，是一种特殊的内嵌函数
如果在一个内部函数里对外层非全局作用域的变量进行引用，那么内部函数就被认为是闭包
通过闭包可以访问外层非全局作用域的变量，这个作用域称为闭包作用域

闭包的返回值通常是函数

如果要修改闭包作用域中的变量，则需要nonlocal关键字

----------------------------------------

递归

如果一个函数在内部调用自身本身，这个函数就是递归函数

实例：阶乘 n! = 1 x 2 x 3 x 4 x ... x n
斐波那契数列Fibonacci  f(n) = f(n-1) + f(n-2), f(0)=0, f(1)=1

通过以下方式可以设置递归的层数，python默认递归层数为100
import sys
sys.setrecursionlimit(1000)

-----------------------------------------

Lambda表达式

匿名函数的定义
在python中有两类函数：
第一类： 用def关键词定义的正规函数
第二类： 用lambda关键词定义的匿名函数

python使用lambda关键词来创建匿名函数，而非def关键词，它没有函数名，其语法结构如下：
	
	lambda argument_lsit: expression
	
lambda定义匿名函数的关键词
argument_list - 函数参数，他们可以是位置参数、默认参数、关键字参数，和正规函数里的参数类型一样
：冒号，在函数参数和表达式中间要加个冒号
expression -只是一个表达式，输入函数参数，输出一些值

注意：
expression中没有return语句，因为lambda不需要它来返回，表达式本身结果就是返回值
匿名函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数


匿名函数的应用

函数式编程 是指代码中每一块都是不可变的，都由纯函数的形式组成。这里的纯函数，是指函数本身相互独立、互不影响，对于相同的输入，总是会有相同的输出，没有任何副作用。

匿名函数 常常应用于函数式编程的高阶函数（high-order function）中，主要有两种形式：
参数是函数（filter,map）
返回是函数（closure）
如在filter和map函数中的应用：
filter(function,iterable)过滤序列，过滤掉不符合条件的元素，返回一个迭代器对象，如果要转换为列表，可以使用list()来转换。
map(function, *iterables)根据提供的函数对指定序列做映射
除了python这些内置函数，我们也可以自己定义高阶函数。

——————————————————————————————————————————————————————————————————————————————————————————————————










