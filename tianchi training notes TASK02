AI训练营python TASK2 第三天 20200907 

简单数据类型 包含 整型int, 浮点型float, 布尔型bool
容器数据类型 包含 列表list, 元组tuple, 字典dict, 集合set, 字符串str

列表

1.列表定义
有序集合，无固定大小，能保存任意数量任意类型，由[]将所有元素绑在一起，并由逗号将元素隔开

2.列表创建
创建普通列表
使用range()函数创建
利用推导式创建列表  #由于list的元素可以是任何对象，因此列表中所保存的是对象的指针。即使保存的是一个简单的[1,2,3],也有3个指针和3个整数对象
创建混合列表
创建空列表
#列表中的内容可以更改（mutable)

3.向列表中添加元素
list.append(a)在列表末尾添加新的对象。只接受一个参数，参数可以是任意类型，且在添加后保持原结构类型。   追加
list.extend(seq)在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）   扩展
list.insert(index, obj)在编号index位置插入obj.

4.删除列表中的元素
list.remove(obj)移除列表中某个值的第一个匹配项   #指定具体要删除的元素
list.pop([index=-1])移除列表中的一个元素（默认最后一个元素），并且返回该元素的值   #指定索引删除，删除后的值可以使用
del var1[, var2 .....] 删除单个或多个对象  #从列表中删除一个元素，且不再以任何方式使用它

5.获取列表中的元素
通过索引值可以获取单个元素，注意索引值从0开始，列表中最后一个元素的索引是-1.
切片通用写法 start: stop: step. 默认列表从头部开始，按1进行索引递增，注意切片为左闭右开区间，即包含开始索引对应的值，不包含结束索引对应的值
切片的步长step值可以为-1，此时开始索引要大于结束索引，代表反向索引列表。
利用[:]可以进行浅拷贝。假设存在列表a，若b=a，则a变化，b也随之改变;若 b=a.copy()或者b=a[:]或者b=list(a)，则a和b属于不同的列表。a改变不会影响b.

6.列表常用操作符
等号 == 只有成员以及位置都相同时才返回True
连接符+ 用于首尾拼接
重复符* 用于复制拼接
成员关系操作符 in, not in

之前的append, extend, insert可对列表增加元素，但没有返回值，而是直接修改了原数据对象。
而将两个list相加，需要创建新的list对象，从而消耗额外的内存。
当list较大时，尽量不要使用‘+’来添加list.

7.列表的其他方法
list.count(obj) 统计某个元素在列表中出现的次数
list.index(x[, start, end]])从列表中找出某个值第一个匹配项的索引位置

list.reverse()反向列表元素 在原列表上进行修改，但不返回结果
对应函数为reversed,在原列表上进行修改，需使用list(reversed())查看结果

list.sort(key=None, reverse=False) 对原列表进行排序
key 是用来进行比较的元素，只有一个参数，具体的函数参数取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序
reverse 排序规则，reverse=True 降序， reverse=False 升序（默认）
该方法没有返回值，但是会对列表对象进行排序，且在原列表上进行修改
对应函数为sorted,直接返回结果


元组

用小括号包住所有元素，且用逗号隔开

1. 创建和访问一个元组
元组和列表类似，但是元组创建后不能修改，类似字符串
元组使用小括号，列表使用方括号。
元组和列表类似，也用整数对它进行索引（indexing）和切片（slicing）
创建元组可以使用小括号，也可以什么都不用，为了可读性，建议使用（）.
元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当做运算符使用。

2.更新和删除一个元组
元组不可更改，因此不能直接给元组的元素赋值，但是只要元组中的元素可更改，那么我们可以直接更改元素，这跟赋值不同。

3. 元组相关操作符
等号== 只有成员位置都相同时才返回True
连接符+ 用于首尾拼接
重复符* 用于复制拼接

4. 内置方法
元组大小和内容都不可更改，因此只有count和index两种方法。

5.解压元组
解压一维元组（有几个元素左边括号定义几个变量）
解压二维元组（按照元组里的元组结构来定义变量）
如果只要元组其中几个元素，用通配符[*],wildcard,在计算机语言中代表一个或多个元素
如果不在乎多余的变量，可以用*_表示。


字符串
定义为引号中的字符集合。单双皆可，但必须成对

常用转义字符
转义字符	描述
\\	反斜杠符号
\'	单引号
\"	双引号
\n	换行
\t	横向制表符(TAB)
\r	回车
如果字符串中需要出现单引号或双引号，可以使用转义符号\对字符串中的符号进行转义。
原始字符串只需在前面添加r即可

三引号可以允许字符串跨多行，字符串可以包含换行、制表符以及其它特殊字符。

2.字符串切片与拼接
不可修改，索引从0开始，字符串索引可参照列表索引，起始、结束、步长，正索引从0开始，从左往右，负索引从-1开始，从右往左。

3.字符串常用内置方法
capitalize()将字符串的第一个字符转换为大写。
lower() 全部转换成小写
upper() 全部转换成大写
title() 各个单词首字母大写
swapcase()大小写互换
count(str, beg=0, end=len(string))返回str在string里面出现的次数
endswith(suffix, beg=0, end=len(string))检查字符串是否已指定子字符串suffix结束，并返回True和False,可指定beg和end,在指定范围内检查。
startswith(substr, beg=0, end=len(string))检查字符串是否已指定子字符串substr开头，并返回True和False,可指定beg和end,在指定范围内检查。
find(str, beg=0, end=len(string))检查str是否包含在字符串里，可指定beg和end,在指定范围内检查，如果包含，则返回索引值，反之则返回-1
rfind(str, beg=0, end=len(string))类似于find()函数，不过是从右边开始查找。
isnumeric()如果字符串中只包含数字字符，则返回True,否则返回False.
ljust(width[,fillchar])返回一个原字符串左对齐，并使用fillchar(默认空格）填充至长度width的新字符串。
rjust(width[,fillchar])返回一个原字符串右对齐，并使用fillchar(默认空格）填充至长度width的新字符串。
lstrip([chars])截掉字符串左边的空格或指定字符
rstrip([chars])截掉字符串末尾的空格或指定字符
strip([chars])在字符串上执行lstrip()和rstrip()
partition(sub)找到子字符串sub,把字符串分为一个三元组（pre_sub, sub, fol_sub),如果字符串中不包含sub则返回('原字符串','','')
rpartition(sub)类似于partition()方法，不过是从右边开始查找
replace(old, new[,max])把字符串中的old替换成new,如果max指定，则替换不超过max次
split(str='', num)不带参数默认事宜空格为分隔符切片字符串，如果num参数有设置，则仅分割num个字符串，返回切片后的子字符串拼接的列表。
splitlines([keepends])按照行（'\r', '\r\n', '\n'）分隔，返回一个包含各行作为元素的列表，如果参数keepends为False,不包含换行符，如果为True,则保留换行符。
maketrans(intab, outtab)创建字符映射的转化表，第一个参数是字符串，表示需要转换的字符，第二个参数也是 字符串表示转换的目标。
translate(table, deletechars='')根据参数table给出的表，转换字符串的字符，要过滤掉的字符放到deletechars参数中。

4.字符串格式
format格式化函数

Python 字符串格式化符号
符 号	描述
%c	格式化字符及其ASCII码
%s	格式化字符串，用str()方法处理对象
%r	格式化字符串，用rper()方法处理对象
%d	格式化整数
%o	格式化无符号八进制数
%x	格式化无符号十六进制数
%X	格式化无符号十六进制数（大写）
%f	格式化浮点数字，可指定小数点后的精度
%e	用科学计数法格式化浮点数
%E	作用同%e，用科学计数法格式化浮点数
%g	根据值的大小决定使用%f或%e
%G	作用同%g，根据值的大小决定使用%f或%E

格式化操作符辅助指令
符号	功能
m.n	m 是显示的最小总宽度,n 是小数点后的位数（如果可用的话）
-	用作左对齐
+	在正数前面显示加号( + )
#	在八进制数前面显示零('0')，在十六进制前面显示'0x'或者'0X'(取决于用的是'x'还是'X')
0	显示的数字前面填充'0'而不是默认的空格

f字符串











